document.addEventListener('DOMContentLoaded', () => {
    // -------------------------------------------------------------
    // ATEN√á√ÉO: TODO O C√ìDIGO DO JAVASCRIPT DEVE ESTAR AQUI DENTRO!
    // -------------------------------------------------------------

    // --- Elementos do DOM --- (Verifique se os IDs est√£o corretos no HTML!)
    const menuScreen = document.getElementById('menu-screen');
    const gameScreen = document.getElementById('game-screen');
    const endScreen = document.getElementById('end-screen');
    const startGameButton = document.getElementById('startGameButton'); // ID CR√çTICO
    const restartGameButton = document.getElementById('restartGameButton');
    const gameBoard = document.getElementById('game-board');
    const difficultySelect = document.getElementById('difficulty');
    const themeSelect = document.getElementById('theme');
    const movesCounter = document.getElementById('moves-counter');
    const timerDisplay = document.getElementById('timer');
    const finalTimeDisplay = document.getElementById('final-time');
    const finalMovesDisplay = document.getElementById('final-moves');

    // --- Vari√°veis Globais de Estado do Jogo ---
    let difficulty = 4; // 4x4 padr√£o
    let theme = 'disney';
    let cardValues = {}; 
    let cardsArray = [];
    let cardsFlipped = [];
    let matchedPairs = 0;
    let totalPairs = 0;
    let moves = 0;
    let timerInterval;
    let startTime;
    let lockBoard = false; 

    // --- Defini√ß√£o de √çcones/Valores ---
    const ICON_MAP = {
        disney: ['üê≠', '‚ùÑÔ∏è', 'ü¶Å', 'üßú‚Äç‚ôÄÔ∏è', 'üëë', 'üêò', 'üßû‚Äç‚ôÇÔ∏è', 'üêª', 'üê∂', 'üêà', 'üêù', 'ü¶ä', 'üê∏', 'ü¶â', 'ü¶Ñ', 'üê≤', 'üêû', 'ü¶Ü', 'ü¶¢', 'ü¶©', 'ü¶í', 'ü¶ì', 'üêí', 'ü¶ã', 'üê¢', 'ü¶ñ', 'ü¶à', 'üê≥', 'ü¶Ä', 'ü¶Ç', 'üï∏Ô∏è', 'üï∑Ô∏è'],
        animals: ['ü¶Å', 'üêò', 'üê¨', 'üêí', 'ü¶í', 'üêÖ', 'ü¶ì', 'üêº', 'üêª', 'üê∫', 'ü¶ä', 'üê±', 'üê∂', 'üê∞', 'üê≠', 'üê∏', 'ü¶â', 'ü¶Ö', 'ü¶Ü', 'ü¶ã', 'üêù', 'üêú', 'üêû', 'üê†', 'üê≥', 'ü¶à', 'üêô', 'ü¶Ä', 'üêç', 'üê¢', 'üêä', 'ü¶é'],
        pokemon: ['‚ö°', 'üî•', 'üå±', 'üíß', '‚ú®', 'üíÄ', 'üéà', 'üëª', 'üç¶', 'üç©', 'üçî', 'üçü', 'üçï', 'üç£', 'üç§', 'üçú', 'üçö', 'üçô', 'üçò', 'üç†', 'üç¢', 'üç°', 'üçß', 'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçí'],
        fruits: ['üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçí', 'üçç', 'ü•ù', 'ü•ë', 'ü••', 'ü•≠', 'üçë', 'ü´ê', 'üçà', 'üçè', 'üå∂Ô∏è', 'ü•¶', 'ü•ï', 'ü•î', 'üßÖ', 'üåΩ', 'üçÑ', 'ü•ú', 'üå∞', 'üçû', 'ü•ê', 'ü•ñ', 'ü•®', 'ü•û'],
        food: ['üçï', 'üçî', 'üçü', 'üç£', 'üç©', 'üç¶', 'üçú', 'üåÆ', 'ü•™', 'üç≥', 'ü•ì', 'üçó', 'üçñ', 'üç§', 'üçö', 'üçû', 'üç∞', 'üç™', 'üç´', 'üç¨', '‚òï', 'ü•§', 'üç∫', 'üç∑', 'üç∂', 'üçº', 'ü•õ', 'üçØ', 'üßÇ', 'üå∂Ô∏è', 'üçÑ', 'ü•í']
    };

    // --- Fun√ß√µes Auxiliares ---
    function shuffle(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }

    function formatTime(totalSeconds) {
        const minutes = Math.floor(totalSeconds / 60);
        const seconds = totalSeconds % 60;
        return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    }

    // --- Fun√ß√µes do Jogo ---
    function initializeGame() {
        // 1. Configurar vari√°veis
        difficulty = parseInt(difficultySelect.value);
        theme = themeSelect.value;
        const gridSize = difficulty * difficulty; // Total de cartas
        totalPairs = gridSize / 2;
        moves = 0;
        matchedPairs = 0;
        cardsFlipped = [];
        lockBoard = false;
        movesCounter.textContent = moves;

        // 2. Gerar e embaralhar as cartas
        const availableIcons = ICON_MAP[theme].slice(0, totalPairs);
        cardsArray = [...availableIcons, ...availableIcons]; 
        shuffle(cardsArray);

        // 3. Configurar a grade CSS para responsividade
        gameBoard.style.gridTemplateColumns = `repeat(${difficulty}, 1fr)`;

        // 4. Injetar HTML das cartas
        gameBoard.innerHTML = ''; 
        cardsArray.forEach((value, index) => {
            const cardElement = document.createElement('div');
            cardElement.classList.add('card');
            cardElement.dataset.value = value;
            cardElement.dataset.index = index;
            cardElement.innerHTML = `
                <div class="card-inner">
                    <div class="card-front">${value}</div>
                    <div class="card-back"></div>
                </div>
            `;
            cardElement.addEventListener('click', flipCard);
            gameBoard.appendChild(cardElement);
        });

        // 5. Iniciar Timer
        clearInterval(timerInterval);
        startTime = Date.now();
        timerDisplay.textContent = '00:00';
        timerInterval = setInterval(updateTimer, 1000);

        // 6. Transi√ß√£o de tela
        menuScreen.classList.add('hidden');
        gameScreen.classList.remove('hidden');
        endScreen.classList.add('hidden');
    }

    function updateTimer() {
        const elapsedSeconds = Math.floor((Date.now() - startTime) / 1000);
        timerDisplay.textContent = formatTime(elapsedSeconds);
    }

    function flipCard(event) {
        const clickedCard = event.currentTarget;

        if (lockBoard || clickedCard.classList.contains('matched') || clickedCard.classList.contains('flipped')) {
            return;
        }

        clickedCard.classList.add('flipped');
        cardsFlipped.push(clickedCard);

        if (cardsFlipped.length === 2) {
            moves++;
            movesCounter.textContent = moves;
            lockBoard = true;
            
            checkForMatch();
        }
    }

    function checkForMatch() {
        const [card1, card2] = cardsFlipped;
        const isMatch = card1.dataset.value === card2.dataset.value;

        isMatch ? disableCards() : unflipCards();
    }

    function disableCards() {
        cardsFlipped.forEach(card => {
            card.classList.add('matched');
            card.removeEventListener('click', flipCard); 
        });
        
        matchedPairs++;
        resetBoard();
        
        if (matchedPairs === totalPairs) {
            endGame();
        }
    }

    function unflipCards() {
        setTimeout(() => {
            cardsFlipped.forEach(card => card.classList.remove('flipped'));
            resetBoard();
        }, 1000); 
    }

    function resetBoard() {
        cardsFlipped = [];
        lockBoard = false;
    }

    function endGame() {
        clearInterval(timerInterval);
        
        const finalTime = timerDisplay.textContent;

        finalTimeDisplay.textContent = finalTime;
        finalMovesDisplay.textContent = moves;

        gameScreen.classList.add('hidden');
        endScreen.classList.remove('hidden');
    }


    // --- üö® VERIFICAR ESTA SE√á√ÉO! üö® ---

    // 1. ANTES de adicionar o Listener, GARANTA que o bot√£o existe:
    if (startGameButton) {
        // 2. Adicionar o Listener
        startGameButton.addEventListener('click', initializeGame);
    } else {
        console.error("ERRO: O elemento #startGameButton n√£o foi encontrado no HTML!");
    }
    
    // Listener de Reiniciar (para quando o jogo terminar)
    if (restartGameButton) {
        restartGameButton.addEventListener('click', () => {
            endScreen.classList.add('hidden');
            menuScreen.classList.remove('hidden');
        });
    }


    // Garante que apenas o menu inicial est√° vis√≠vel ao carregar a p√°gina
    gameScreen.classList.add('hidden');
    endScreen.classList.add('hidden');

// -------------------------------------------------------------
});